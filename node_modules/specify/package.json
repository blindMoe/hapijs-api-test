{
  "name": "specify",
  "description": "bite sized node.js testing",
  "author": {
    "name": "nuno job",
    "email": "nunojobpinto@gmail.com",
    "url": "http://nunojob.com/"
  },
  "contributors": [
    {
      "name": "David Trejo",
      "email": "david@dtrejo.com",
      "url": "http://dtrejo.com"
    },
    {
      "name": "Jarrett Cruger",
      "url": "https://github.com/jcrugzz"
    },
    {
      "name": "Isaac Z. Schlueter",
      "url": "http://izs.me"
    },
    {
      "name": "Jon Buckley",
      "email": "jon@jbuckley.ca",
      "url": "http://jbuckley.ca"
    }
  ],
  "version": "1.2.1",
  "main": "./specify.js",
  "homepage": "https://github.com/dscape/specify",
  "repository": {
    "type": "git",
    "url": "http://github.com/dscape/specify.git"
  },
  "bugs": {
    "url": "http://github.com/dscape/specify/issues"
  },
  "keywords": [
    "test",
    "assert",
    "should",
    "tdd"
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "./test.sh"
  },
  "bin": {
    "specify": "./bin/specify"
  },
  "dependencies": {
    "difflet": "0.2.x",
    "colors": "0.6.x",
    "cycle": "1.0.x",
    "optimist": "0.3.x",
    "esprima": "1.0.x"
  },
  "readme": "<a name=\"specify\"/>\n# specify\n\n`specify` is the simplest way i could think to do node.js testing.\n\nIt works with sync code and async code all the same.\n\nPlease use versions `~0.6.x` for node `0.6` and `~1.0.x` for node `0.8` or higher.\n\nIf you don't like reading and want to see some code you can look at [nano's tests](https://github.com/dscape/nano/tree/master/tests) and learn there. Also read the `specify` source code; it's just a couple of lines of code.\n\n``` js\nvar specify = require('specify');\n\nspecify('create_by_secret', function (assert) {\n  user.create_by_secret({invitation_code: \"1234321!!\"}, function (err) {\n    assert.equal(err.eid, \"ec:api:user:create_by_secret:wrong_code\");\n    assert.equal(err.status_code, 400);\n  });\n});\n\nspecify.run();\n```\n\nThe assert calls are callback functions that wrap the assert module. `specify` figures out how many callbacks you are calling by [static-analysis]. To put it simply, it counts the number of times you wrote `assert`. When that number of assertions is met, or when a timeout occurs, that test is complete and we can execute the next one.\n\nStatic analysis does not work for a `for` loop and some other flow control constructs. In that case you can use `assert.expect(nr)` to tell specify how many assertions to expect:\n\n``` js\nspecify('more_assertions_than_asserts', function(assert) {\n  assert.expect(5);\n  for(var i in [1,2,3,4,5]) {\n    assert.equal(i,i);\n  }\n});\n```\n\n`specify` runs tests one by one, not in parallel. If you set `assert.expect` higher than the number of `assert` function calls the execution will stop, and your current test will never finish. You can circumvent this by setting a timeout:\n\n``` js\nspecify('foo', 50, function (assert) {\n  call_to_db_that_takes_a_long_time(function (data) {\n    assert.equal(data, 'foo');\n  });\n});\n```\n\nBecause tests are serialized, `specify` can catch uncaught exceptions and continue to run. You will get a report about the error that was thrown somewhere in your stack. This is analogous to the functionality the community refers to as `domains`.\n\n`specify` is standalone; you don't need any special binaries to run it.\n\nIf you think all these `specify` functions make your code look bloated, you can also run a single function:\n\n``` js\nvar specify = require('specify')\n  , request = require('request')\n  ;\n\nspecify.run(\n\n  function (assert) {\n\n    var get = { uri: \"http://someservice.com/1/apps/dscape\", json: true }\n      , del = { uri: \"http://someservice.com/1/apps/dscape\", method: \"DELETE\"\n              , json : true }\n      , app_name\n      ;\n\n    request(get, function (err, _, body) {\n\n      assert.equal(err,null);\n      assert.ok(body.rows);\n      assert.ok(body.total_rows >= 1);\n      assert.ok(body.rows.length >= 1);\n\n      app_name = body.rows[0].value.app_name;\n      del.uri += \"/\" + app_name;\n\n      request(del, function (err, resp, body) {\n\n        assert.equal(err,null);\n        assert.equal(resp.statusCode, 200);\n        assert.equal(body.app.name, app_name);\n        assert.equal(body.app.user,\"dscape\");\n\n      });\n\n    });\n\n  }\n\n);\n```\n\n<a name=\"installation\"/>\n# installation\n\n<a name=\"node\"/>\n## node.js\n\n1. install [npm]\n2. `npm install specify`\n3. `var specify = require('specify');`\n\n<a name=\"filtering\"/>\n# filtering\n\nIn `specify` you specify which tests you want to run:\n\n``` js\nvar specify = require('specify')\n  , filters = process.argv.slice(2)\n  ;\n\nspecify('foo', function (assert) {\n  assert.equal('foo', 'foo');\n});\n\nspecify('bar', function (assert) {\n  assert.equal('bar', 'baz', 'bar failed');\n});\n\nspecify('baz', function (assert) {\n  assert.equal('baz', 'baz');\n});\n\nspecify.run(filters);\n```\n\n<a name=\"reporters\"/>\n# reporters\n\nIf you feel like the output sent to `stdout` is ugly, you can write your own reporter and send in a pull request.\n\nNow use it:\n\n``` js\nspecify('specify#ask_for_a_specific_reporter', function(assert) {\n  specify.reporter('my_awesome_reporter');\n  setTimeout(function (){\n    assert.ok(true);\n  },1);\n});\n```\n\nYou can also do this with a function if you like:\n\n``` js\nspecify('specify#custom_reporter_from_function', function(assert) {\n  specify.reporter(function (name, report, errors) {\n    console.log(name);\n  });\n  setTimeout(function () {\n    assert.ok(false, 'i see dead people');\n    assert.ok(true);\n  },1);\n});\n```\n\n<a name=\"samples\"/>\n# samples\n\nSamples are available in the `/test` folder.\n\n<a name=\"contribute\"/>\n# contribute\n\nEveryone is welcome to contribute. Patches, bug-fixes, reporters, new features.\n\n1. Create an [issue][issues] so the community can comment on your idea\n2. Fork `specify`\n3. Create a new branch `git checkout -b feature_name`\n4. Create tests for the changes you made\n5. Make sure you pass both existing and newly inserted tests\n6. Commit your changes\n7. Push to your branch `git push origin feature_name`\n8. Create a pull request\n\n<a name=\"meta\"/>\n# meta\n\n* Code: `git clone git://github.com/dscape/specify.git`\n* Home: <http://github.com/dscape/specify>\n* Bugs: <http://github.com/dscape/specify/issues>\n* Build: [![build status](https://secure.travis-ci.org/dscape/specify.png)](http://travis-ci.org/dscape/specify)\n\n\n`(oO)--',-` in [caos]\n\n<a name=\"license\"/>\n# license\n\nCopyright 2012 nuno job <nunojob.com> `(oO)--',--`\n\nLicensed under the apache license, version 2.0 (the \"license\");\nYou may not use this file except in compliance with the license.\nYou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n\n[npm]: http://npmjs.org\n[issues]: http://github.com/dscape/specify/issues\n[caos]: http://caos.di.uminho.pt/\n[static-analysis]: http://en.wikipedia.org/wiki/Static_program_analysis\n",
  "readmeFilename": "README.md",
  "_id": "specify@1.2.1",
  "_from": "specify@"
}

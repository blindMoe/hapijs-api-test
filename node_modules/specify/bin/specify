#!/usr/bin/env node
var fs        = require('fs')
  , path      = require('path')
  , tty       = require('tty')
  , spawn     = require('child_process').spawn
  , argv      = require('optimist').argv
  , stack     = []
  , success   = true
  , args      = {env: process.env}
  , counts    = {ok: 0, total: 0}
  , buffer    = ''
  , base_path
  , dirs
  , files
  , test
  ;

//
// Will try to find tests in `tests` and `test`
// Throws otherwise
//
try {
  base_path = path.resolve('.', 'tests');
  dirs      = fs.readdirSync(base_path);
} catch (exc) {
  base_path = path.resolve('.', 'test');
  dirs      = fs.readdirSync(base_path);
}

//
// Set env vars in a platform agnostic way
//
(Array.isArray(argv.e) ? argv.e : argv.e ? [argv.e] : [])
.forEach(function (env_var) {
  if(~env_var.indexOf('=')) {
    var split = env_var.split('=');
    args.env[split[0]] = split[1];
  }
});

//
// Try to get tty size to give to child process
// This allows shell to be resized to whatever is the current window size
//
var isatty = tty.isatty(1) && tty.isatty(2)
  , width  = isatty
    ? process.stdout.getWindowSize
      ? process.stdout.getWindowSize(1)[0]
      : tty.getWindowSize
        ? tty.getWindowSize()[1]
        : null
    : null
  ;

//
// If we found something define it as MAXCOLS internal var
//
if(typeof width === 'number') {
  args.env.SPECIFY_MAXCOLS = width;
}

//
// This is being executed from a runner
//
args.env.SPECIFY_FROM_RUNNER = true;

//
// Set a reporter
//
args.env.SPECIFY_REPORTER = argv.r
                         || process.env.SPECIFY_REPORTER
                         || 'default';

//
// For spawn
//
args.stdio = ['pipe', 'pipe', 'pipe'];

//
// Recurse each file/subdirectory in our test folder
//
for(var dir in dirs) {
  //
  // Get that file/subdirectory path
  //
  var dir_path = path.resolve(base_path, dirs[dir]);
  //
  // If its indeed a subdirectory
  //
  if(fs.statSync(dir_path).isDirectory()) {
    //
    // Read the files in the subdirectory
    //
    files = fs.readdirSync(dir_path);
    //
    // For each file
    //
    for (var file in files) {
      //
      // Get the file path and run it if the extension is `js` or `node`
      //
      var file_path = path.resolve(dir_path, files[file]);
      if(/\.js$|\.node$/.test(file_path)) {
        //
        // Put the test in the stack yo.
        //
        stack.push(file_path);
      }
    }
  }
}

//
// Let's start running our tests
//
runTests(stack, true);

//
// ### function runTests(tests, previousStatus)
// #### @tests {Array} Tests the need some runnin
// #### @previousStatus {Boolean} To set failure from a previous call
//
// Runs all the tests.
//
function runTests(tests, previousStatus) {
  //
  // Get the file name we want to run
  //
  var test_path = tests[0];

  //
  // If we have a file name
  //
  if(test_path) {

    //
    // Start a child process to run that test
    //
    var test_stream = spawn('node', [test_path], args);

    //
    // Reset our stdio buffer
    //
    buffer      = '';

    //
    // Pipe the stdout from the child process to what the user can see
    // on his screen
    //
    test_stream.stdout.pipe(process.stdout);
    test_stream.stderr.pipe(process.stdout);

    //
    // Buffer the data so we can use it to make global counts across different
    // child processes
    //
    test_stream.stdout.on('data', function (chunk) {
        buffer += chunk;
    });

    //
    // Calculate these totals for this child
    //
    test_stream.on('close', function (exit) {
      //
      // The exit code from the child not being `0` means error
      //
      if(exit !== 0) {
        success = false;
      }
      //
      // Do the calculations, print out the results, recurse to runTests
      //
      ppTest(tests, buffer);
    });

    test_stream.on('error', function (err) {
      //
      // We failed
      //
      success = false;
      console.log(err);
    });
  }

  //
  // Since we have run all the tests and have no filename left
  // its time to run the summary of the suite
  //
  else {
    //
    // If we have data to summarize
    //
    if (counts.ok > 1 && counts.total > 1) {
      try {
        //
        // Get out reporter
        //
        var summarize = require('../reporters/' + args.env.SPECIFY_REPORTER);
        summarize('totals');
        summarize('summary',
          { ok: counts.ok
          , fail: counts.total-counts.ok
          , notrun: 0
          , thrown: 0
          , _nostdout: true
          });
      } catch (exc) {}
    }
    //
    // Make sure it fails if at least one test failed
    //
    return process.exit(success ? 0 : 1);
  }
}

//
// ### ppTest (tests)
// #### @tests {Array} Tests to prepare
//
// Prepate tests for `exec`
//
function ppTest (tests, stdout) {
  //
  // Get the path from current tests
  //
  var file_path = tests.shift();

  //
  // Update totals, if possible and provided by reporter
  //
  var lines = stdout.split('\n');

  //
  // If we actually got some new line separated test results
  //
  if(lines.length>0) {
    //
    // Get the line before the last (last is simply a new line in specify)
    //
    var last_line = lines[lines.length-2];

    //
    // If we have a count in our last line that was spit out by the test
    // we want to see if there's a `/`
    //
    // Like in:
    //    /tests/shared/nano.js
    //
    //  ✔ 2/2 shared_nano:test
    //  ✔ 2/2 summary
    //
    // or
    // ✔ /tests/design/query.js .............................. 12/12
    //
    // we are interested in the \d+\/\d+ part of it, so lets break it there
    //
    if(!last_line) {
      console.log(stdout);
    }
    else if(~last_line.indexOf('/')) {
      //
      // Get the last line and try to understand if we can extract counts
      // like 1/5
      //
      var values = last_line.split('/');

      if(values.length > 1) {
        //
        // Transform values to integer. the worst way possible
        //
        //  > +9
        //  9
        //  > +'9'
        //  9
        //  > +'9n'
        //  NaN
        //
        // We split by space to trim out potential non numbers
        //
        // For `worked` the thing we want in the last word (length-1) on the
        // part of the split in the position before last (values length-2)
        //
        var worked = values[values.length-2].split(' ');
        worked = +worked[worked.length-1];

        //
        // For total this is the first word (0) in the last position of the
        // split (values length-1)
        //
        var total  = +values[values.length-1].split(' ')[0];

        //
        // If these things are not numbers
        //
        if(!isNaN(worked) && !isNaN(total)) {
          //
          // Update our counts using the result from child process
          // When we end we can summarize all tests
          //
          counts.ok    += worked;
          counts.total += total;
          //
          // Next!
          //
          lines.pop();
        }
      }
    }
  }

  //
  // To iterate is human, <<end of quote goes here>>
  //
  runTests(tests);
}
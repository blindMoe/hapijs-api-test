  /test/specify.js
✗ 0/1 specify:no_arguments_in_cb 
└─────  `assert` must be the first argument of your callback
✗ 0/1 specify#no_assertions 
└─────  you need to add at least one `assert.*` call
✔ 1/1 specify#dinosaurs 
✗ 0/1 specify#wrong_var 
└─────  you need to add at least one `dino.*` call
✔ 1/1 specify#sync 
✔ 7/7 specify#all_assertions 
✗ 1/3 specify#assertion_with_optional_message 
└───── this is the error you are looking for
❝ ok false
└───── this will
❝ ok false
specify#custom_pretty_print :: [{"msg":"i see dead people","assert":"ok","args":[false,"i see dead people"]}]
✗ 0/1 specify#ask_for_a_specific_reporter 
└───── back to default
❝ ok false
specify#custom_pretty_print_just_name
✔ 1/1 specify#async 
✗ 1/2 specify#timeout 
└───── Timeout
❝ equal 
"domain" // {
 "domain_thrown": true,
 "domain": {
  "members": [],
  "_events": {}
 },
 "stacktrace": [
 ]
}
✔ 2/2 specify#timeout_after 
✔ 5/5 specify#more_assertions_than_asserts 
✗ 0/1 specify#differences:ok 
└───── Should be true
❝ ok false
✗ 0/1 specify#differences:equal 
└───── One is love
❝ equal 
13 // 1
✗ 0/1 specify#differences:equal_undefined 
└───── One is love
❝ equal 
"undefined" // 1
✗ 0/1 specify#differences:notequal 
└───── One two
❝ notEqual 
2 // 2
✗ 0/1 specify#differences:deepequal 
└───── Blooper
❝ deepEqual 
{
  "a" : {
    "b" : [1m3[0m[1m // != 1[0m
  }
}
✗ 0/1 specify#differences:notdeepequal 
└───── Not Deep
❝ notDeepEqual 
{
  "a" : 1
}
✗ 0/1 specify#differences:strictequal 
└───── Dont be like that
❝ strictEqual 
5 // 3
✗ 0/1 specify#differences:notstrictequal 
└───── 3 4 knock on the door
❝ notStrictEqual 
4 // 4
✗ 1/5 specify#circular_reference 
└───── Error
❝ equal 
{
 "abc": "Hello",
 "go": {
  "$ref": "$"
 }
} // "undefined"
└───── Error
❝ equal 
"undefined" // {
 "abc": "Hello",
 "go": {
  "$ref": "$"
 }
}
└───── Error
❝ equal 
{[1m
  "abc" : "Hello",[0m[1m // != undefined[0m[1m
  "go" : {
  }[0m[1m // != undefined[0m
}
└───── Error
❝ equal 
{
  [1m[0m[1m// [0m[1m"abc" : "Hello",
  [0m[1m// [0m[1m"go" : {"abc":"Hello","go":{}}[0m
}
✗ 0/2 specify#cascading_sync 
└───── No error
❝ ok false
└───── Cannot read property 'name' of undefined
❝ equal 
"domain" // {
 "domain_thrown": true,
 "domain": {
  "members": [],
  "_events": {}
 },
 "stacktrace": [
 ]
}
✗ 0/1 specify#throws 
└───── bla
❝ equal 
"domain" // {
 "stacktrace": [
 ]
}
{"name":"specify#json_reporter","report":{"ok":1,"fail":0,"notrun":0,"thrown":0,"meta":{"name":"specify#json_reporter","expected":1,"remaining":[["specify#comments",null],["specify#comments_arent_detected",null]],"errored":[],"remaining_assertions":0},"duration":0},"errors":{"$ref":"$[\"report\"][\"meta\"][\"errored\"]"}}
{"name":"specify#comments","report":{"ok":2,"fail":0,"notrun":0,"thrown":0,"meta":{"name":"specify#comments","expected":2,"remaining":[["specify#comments_arent_detected",null]],"errored":[],"remaining_assertions":0},"duration":0},"errors":{"$ref":"$[\"report\"][\"meta\"][\"errored\"]"}}
{"name":"specify#comments_arent_detected","report":{"ok":1,"fail":0,"notrun":0,"thrown":0,"meta":{"name":"specify#comments_arent_detected","expected":1,"remaining":[],"errored":[],"remaining_assertions":0},"duration":0},"errors":{"$ref":"$[\"report\"][\"meta\"][\"errored\"]"}}
{"name":"summary","report":{"ok":25,"fail":21,"notrun":3,"thrown":3,"duration":0}}
